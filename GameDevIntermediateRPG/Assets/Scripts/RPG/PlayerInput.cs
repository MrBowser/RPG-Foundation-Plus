//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/RPG/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""f50338ed-6c99-4a97-810f-e382873913df"",
            ""actions"": [
                {
                    ""name"": ""ClickMove"",
                    ""type"": ""Button"",
                    ""id"": ""fef6c6af-877d-4aa1-a542-1af0618e4bd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveCommandLoad"",
                    ""type"": ""Button"",
                    ""id"": ""c3d18b15-6144-44fd-8668-eebeb49ddd82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveCommandSave"",
                    ""type"": ""Button"",
                    ""id"": ""5b31eb31-1485-4f85-9391-3ef875e66cf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30c0311d-f17b-4664-aa02-8c635a49686e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e0e5d99-2a49-4ad2-bae7-0893608438af"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveCommandLoad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2229d698-c457-4591-bdd6-7a4cc7387311"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveCommandSave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_ClickMove = m_PlayerControls.FindAction("ClickMove", throwIfNotFound: true);
        m_PlayerControls_SaveCommandLoad = m_PlayerControls.FindAction("SaveCommandLoad", throwIfNotFound: true);
        m_PlayerControls_SaveCommandSave = m_PlayerControls.FindAction("SaveCommandSave", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_ClickMove;
    private readonly InputAction m_PlayerControls_SaveCommandLoad;
    private readonly InputAction m_PlayerControls_SaveCommandSave;
    public struct PlayerControlsActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickMove => m_Wrapper.m_PlayerControls_ClickMove;
        public InputAction @SaveCommandLoad => m_Wrapper.m_PlayerControls_SaveCommandLoad;
        public InputAction @SaveCommandSave => m_Wrapper.m_PlayerControls_SaveCommandSave;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @ClickMove.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnClickMove;
                @ClickMove.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnClickMove;
                @ClickMove.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnClickMove;
                @SaveCommandLoad.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnSaveCommandLoad;
                @SaveCommandLoad.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnSaveCommandLoad;
                @SaveCommandLoad.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnSaveCommandLoad;
                @SaveCommandSave.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnSaveCommandSave;
                @SaveCommandSave.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnSaveCommandSave;
                @SaveCommandSave.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnSaveCommandSave;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ClickMove.started += instance.OnClickMove;
                @ClickMove.performed += instance.OnClickMove;
                @ClickMove.canceled += instance.OnClickMove;
                @SaveCommandLoad.started += instance.OnSaveCommandLoad;
                @SaveCommandLoad.performed += instance.OnSaveCommandLoad;
                @SaveCommandLoad.canceled += instance.OnSaveCommandLoad;
                @SaveCommandSave.started += instance.OnSaveCommandSave;
                @SaveCommandSave.performed += instance.OnSaveCommandSave;
                @SaveCommandSave.canceled += instance.OnSaveCommandSave;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnClickMove(InputAction.CallbackContext context);
        void OnSaveCommandLoad(InputAction.CallbackContext context);
        void OnSaveCommandSave(InputAction.CallbackContext context);
    }
}
